Lab #01. Part 1 (Intro to Python)
Deadline: 23/09/2022
One variant (4 tasks) for everyone
Task #01
Write a Python-script that performs simple arithmetic operations: '+', '-', '*', '/'. The type of operator and data are set on the command line when the script is run.
The script should be launched like this:
$ python my_task.py 1 * 2
Notes:
Use the argparse module to parse command line arguments. Your implementation shouldn't require entering any parameters (like -f or --function).
Task #02
Write a Python-script that performs the standard math functions on the data.
The name of function and data are set on the command line when the script is run.
The script should be launched like this:
$ python my_task.py add 1 2
Notes:
Function names must match the standard math functions from the built-in libraries.
Use the argparse module to parse command line arguments. Your implementation shouldn't require entering any parameters (like -f or --function).
Task #03
Write a Python-script that determines whether the input string is the correct entry for the 'formula' according EBNF syntax (without using regular expressions).
Formula = Number* | (Formula Sign Formula)
Sign = '+' | '-'
Number = '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'
Input: string
Result: (True / False, The result value / None)
Example,
user_input = '1+2+4-2+5-1' result = (True, 9)
user_input = '123' result = (True, 123)
user_input = 'hello+12' result = (False, None)
user_input = '2++12--3' result = (False, None)
user_input = '' result = (False, None)
Example how to call the script from CLI:
$ python task_1_ex_3.py 1+5-2
Hint: use argparse module for parsing arguments from CLI
Task #04
You are given n bars of gold with weights: w1, w2, ..., wn and bag with capacity W.
There is only one instance of each bar and for each bar you can either take it or not (hence you cannot take a fraction of a bar).
Write a function that returns the maximum weight of gold that fits into a knapsack's capacity.
The first parameter contains 'capacity' - integer describing the capacity of a knapsack.
The next parameter contains 'weights' - list of weights of each gold bar.
The last parameter contains 'bars_number' - integer describing the number of gold bars.
Output : Maximum weight of gold that fits into a knapsack with capacity of W.
Note:
Use the argparse module to parse command line arguments. You don't need to enter names of parameters (i. e. -capacity).
Example of how the task should be called:
$ python task3_1.py -W 56 -w 3 4 5 6 -n 4



---------------------------------------------------------------------------------------------------------------




Lab #01. Part 2 (Encapsulation)
Deadline - 07/10/2022
One variant (6 tasks) for everyone
Task #01
Create a class Rectangle with attributes length and width, each of which defaults to 1. Provide methods that calculate the perimeter and the area of the rectangle. Also, provide setter and getter for the length and width attributes. The setter should verify that length and width are each floating-point numbers larger than 0.0 and less than 20.0.
Task #02
Create a class called Rational for performing arithmetic with fractions. Write a program to test your class. Use integer variables to represent the private data of the class – the numerator and the denominator. Provide a __init__() method that enables an object of this class to be initialized when it’s declared. The __init__() should contain default parameter values in case no initializers are provided and should store the fraction in reduced form. For example, the fraction 2/4 would be stored in the object as 1 in the numerator and 2 in the denominator. Provide public methods that perform each of the following tasks:
- printing Rational numbers in the form a/b, where a is the numerator and b is the denominator.
- printing Rational numbers in floating-point format. (отредактировано)
Task #03
Create a class that descibes a Product of online store. As a Product fields you can use a price, description and product' dimensions.
Create a class that describes a Customer. As a Customer fields you can use surname, name, patronymic, mobile phone, etc.
Create a class that describes an Order.
- the order must contain data about the customer who carried it out and products. Implement a method for calculating the total order value.
Task #04
Create a class that performs statistical processing of a text file - counting characters, words, sentences, etc. Determine the required attributes-data and attributes-methods in class for working with the text file.
Task #05
The class GROUP contains a sequence of instances of the class STUDENT. The class STUDENT contains the student's name, surname, record book number and grades. Determine the required attributes-data and attributes-methods in classes GROUP and STUDENT. Find the average score of each student. Output to the standard output stream the five students with the highest average score.
Assume that there can be no more than 20 students in a group, as well as students with the same name and surname.
Task #06
Create a class BINARY TREE that contains background information of product prices (product code, price of 1 product). The tree is sorted by product codes. From the keyboard enter data on the number of products in the format: product code, number of products. Using a tree, find the cost of products (cost = quantity * price of one product).



------------------------------------------------------------------------------------------------------------------------------



